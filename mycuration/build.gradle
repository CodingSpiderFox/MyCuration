apply plugin: 'jacoco'
apply plugin: 'com.android.application'
apply plugin: 'spoon'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId "com.phicdy.mycuration"
        minSdkVersion 14
        targetSdkVersion 25
        versionName "1.3.3"
        versionCode 19

        testApplicationId "com.phicdy.mycuration.test"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable "RtlHardcoded"
        abortOnError true
    }

    productFlavors {
        production {
            minSdkVersion 14
        }
        uiTest {
            minSdkVersion 18
        }
    }

}

jacoco {
    toolVersion = "0.7.7.201606060606"
}

// A list of directories which should be included in coverage report
def coverageSourceDirs = ['src/main/java']
// A list of files which should be excluded from coverage report since they are generated and/or framework code
def coverageExcludeFiles = ['**/R.class', '**/R$*.class', '**/com/android/**/*.*',
                            '**/BuildConfig.class', '**/*Activity*.class',
                            '**/*Fragment*.class', '**/*Receiver.class',
                            '**/*Manifest*.class', '**/*Application*.class']
task jacocoTestReport(type: JacocoReport, dependsOn: ['testUiTestDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        xml.destination "${buildDir}/reports/jacoco/jacocoTestReport.xml"
        html.destination "${buildDir}/reports/jacoco/html"
        classDirectories = files(
                fileTree(
                        dir: "${buildDir}/intermediates/classes/uiTest/debug",
                        exclude: coverageExcludeFiles))
    }
    sourceDirectories = files(coverageSourceDirs)
    executionData = files "${buildDir}/jacoco/testUiTestDebugUnitTest.exec"

    doLast {
        println "jacoco xml report has been generated to file://${buildDir}/reports/jacoco/jacocoTestReport.xml"
        println "jacoco html report has been generated to file://${reports.html.destination}/index.html"
    }
}

spoon {
    debug = true

    // To grant permissions to Android M >= devices */
    grantAllPermissions = true
}

repositories {
    jcenter()
}

dependencies {
    compile project(':PullToReflresh')
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    uiTestCompile 'com.android.support:support-annotations:25.3.1'
    uiTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    uiTestCompile 'com.android.support.test:runner:0.5'
    uiTestCompile 'com.android.support.test:rules:0.5'
    uiTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    uiTestCompile 'com.squareup.spoon:spoon-client:1.6.4'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'org.jsoup:jsoup:1.8.2'
    compile 'com.melnykov:floatingactionbutton:1.1.0'
    compile 'com.github.johnkil.android-progressfragment:progressfragment:1.4.0'
    compile 'com.google.android.gms:play-services-analytics:10.2.1'
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'
    compile 'com.android.support:design:25.3.1'
    compile 'com.github.deano2390:MaterialShowcaseView:1.1.0@aar'
    compile 'com.facebook.stetho:stetho:1.4.2'
}

apply plugin: 'com.google.gms.google-services'
